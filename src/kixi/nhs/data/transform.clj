(ns kixi.nhs.data.transform
  "Collections of functions to transform data."
  (:require [kixi.ckan             :as ckan]
            [kixi.nhs.data.storage :as storage]
            [clojure.tools.logging :as log]))

(defn parse-number
  "Reads a number from a string. Returns nil if not a number."
  [s]
  (let [parsed (clojure.string/replace s #"," "")]
    (when (re-find #"^-?\d+\.?\d*$" parsed)
      (read-string parsed))))

(defn get-value [k m]
  (-> (get m k)
      parse-number))

(defn outer-join
  "Combines data using specified field and function that acts on data with the same field value.
  Returns a sequence of maps, where each map respresents unique field
  and contains data combined from multiple datasets."
  [field data-fn colls]
  (let [lookup #(get % field)
        indexed (for [coll colls]
                  (into {} (map (juxt lookup identity) coll)))]
    (for [key (distinct (mapcat keys indexed))]
      (into {} (map #(data-fn key %) indexed)))))

(defn resource_id->description
  "Returns description of a resource with a specified id."
  [ckan-client resource_id]
  (:description (storage/get-resource-metadata ckan-client resource_id)))

(defn split-by-field-value
  "Creates a map of sequences, where key is a unique field, and value
  is a sequence containing all maps with that field. e.g.
  collection [{:v 5, :year 2010} {:v 4, :year 2010} {:v 0, :year 2009}]
  being split by :year results in:
  {2009 [{:v 0, :year 2009}], 2010 [{:v 5, :year 2010} {:v 4, :year 2010}]}"
  [field coll]
  (let [unique-values (distinct (map #(get % field) coll))
        accumulator   (zipmap unique-values (for [i unique-values] []))]
    (reduce (fn [acc m]
              (update-in acc [(get m field)] (fn [c] (conj c m))))
            accumulator coll)))

(defn remove-ids
  "Removes _id fields from the data that are generated by DataStore."
  [resource]
  ;;(mapv #(dissoc % :_id) resource)
  (mapv #(dissoc % "_id") resource))
